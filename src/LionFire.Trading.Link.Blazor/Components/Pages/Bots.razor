@page "/bots"
@* @inherits ReactiveUI.Blazor.ReactiveInjectableComponentBase<BotsVM> *@

@using LionFire.Reactive.Persistence
@using LionFire.Trading.Automation
@using Microsoft.Extensions.DependencyInjection

<div class="pa-6">
                        @* Data="ViewModel!.Data" *@
    <ObservableDataView @ref=ItemsEditor
                        DataServiceProvider="WorkspaceServices"
                        TKey="string"
                        TValue="BotEntity"
                        TValueVM="BotVM"
                        AllowedEditModes=EditMode.All
                        ReadOnly=false>
        @* EditMode="DataGridEditMode.Cell" *@
        <Columns>
            <HierarchyColumn T="BotVM" />

            @* <PropertyColumn T="BotVM" TProperty="string" Property="x => x.Key" /> *@
            @* Editable="false" *@
            <TemplateColumn T="BotVM">
                <HeaderTemplate>
                    Status
                </HeaderTemplate>
                <CellTemplate>
                    <MudLink Href="@($"/bots/{context.Item.Key}")">
                        <MudIcon Icon="@Icons.Material.Outlined.Circle" />
                    </MudLink>
                    @* <MudIcon Icon="@Icons.Material.Filled.Circle" /> *@
                    @* <MudIcon Color="@Color.Primary" Icon="@Icons.Material.Outlined.Circle" /> *@
                    @* <MudIcon Color=@Color.Primary Icon="@Icons.Material.Filled.Circle" /> *@
                    @* <MudIcon Color="@Color.Secondary" Icon="@Icons.Material.Outlined.Circle" />
                    <MudIcon Color=@Color.Secondary Icon="@Icons.Material.Filled.Circle" />
                    <MudIcon Color="@Color.Tertiary" Icon="@Icons.Material.Outlined.Circle" />
                    <MudIcon Color=@Color.Tertiary Icon="@Icons.Material.Filled.Circle" />
                    <MudIcon Color="@Color.Error" Icon="@Icons.Material.Outlined.Circle" />
                    <MudIcon Color=@Color.Error Icon="@Icons.Material.Filled.Circle" /> *@
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="BotVM">
                <HeaderTemplate>
                    Enabled
                </HeaderTemplate>
                <CellTemplate>
                    @if (context.Item?.Value != null)
                    {
                        <div>
                            <MudSwitch T="bool" @bind-Value="context.Item.Value.Enabled" Color="Color.Primary" ThumbIcon="@Icons.Material.Filled.Radar" Size="Size.Small" ></MudSwitch>
                        </div>
                    }
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="BotVM">
                <HeaderTemplate>
                    Live
                </HeaderTemplate>
                <CellTemplate>
                    @if (context.Item?.Value != null)
                    {
                        <div>
                            <MudSwitch T="bool" ThumbIcon="@Icons.Material.Rounded.AttachMoney" @bind-Value="context.Item.Value.Live" Color=@((context.Item.IsLive ? Color.Secondary : Color.Default)) Size="Size.Small" ></MudSwitch>
                        </div>
                    }
                </CellTemplate>
            </TemplateColumn>


            <PropertyColumn T="BotVM" TProperty="string" Property="x => x.Value.Exchange" Title="Exchange" />
            <PropertyColumn T="BotVM" TProperty="string" Property="x => x.Value.ExchangeArea" Title="Area" />
            <PropertyColumn T="BotVM" TProperty="string" Property="x => x.Value.Symbol" Title="Symbol" />
            <PropertyColumn T="BotVM" TProperty="string" Property="x => x.Value.TimeFrame" Title="TimeFrame" />

            <PropertyColumn T="BotVM" TProperty="string" Property="x => x.Value.BotTypeName" Title="Type" />
            <PropertyColumn T="BotVM" TProperty="string" Property="x => x.Value.Name" />
            <PropertyColumn Property="x => x.AD" Title="AD" T="BotVM" TProperty="double?" />
            <PropertyColumn T="BotVM" TProperty="string" Property="x => x.Value.Comments" />
                @* TODO: Some summary stats:  AD, MHWT, W%, TPM *@
        </Columns>
        <ChildRowContent>
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@context.Item.Value.Name</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>Enabled: <MudSwitch T="bool" @bind-Value="context.Item.Value.Enabled">Enabled</MudSwitch></MudText>
                    <MudText>Comments: @context.Item.Value.Comments</MudText>
                </MudCardContent>
            </MudCard>
        </ChildRowContent>
        <ContextMenu>
            <MudMenuItem Icon="@Icons.Material.Filled.Delete">
                Delete @context.Value.Name
            </MudMenuItem>
            @* <MudMenuItem Icon="@Icons.Material.Filled.Info" OnClick="@ShowHiddenInfo">
                View Details for @_contextRow?.HwId
            </MudMenuItem> *@
        </ContextMenu>
    </ObservableDataView>
</div>

@code {
    // ENH idea: standardize on AmbientServices, and have ObservableDataView use it.
    [CascadingParameter(Name = "WorkspaceServices")]
    public IServiceProvider? WorkspaceServices { get; set; }

    [CascadingParameter(Name = "WorkspaceId")]
    public string? WorkspaceId { get; set; }

    ObservableDataView<string, BotEntity, BotVM>? ItemsEditor { get; set; }

    // protected override void OnParametersSet()
    // {
    //     // ViewModel!.ServiceProvider = WorkspaceServices;
    //     base.OnParametersSet();
    // }

    // protected override void OnInitialized()
    // {
    //     base.OnInitialized();
    // }

}
