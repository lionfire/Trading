@page "/optimize/one-shot"
@* @inherits ReactiveInjectableComponentBase<OneShotOptimizeVM> *@
@inherits ReactiveComponentBase<OneShotOptimizeVM>

@* @rendermode InteractiveServer *@
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using LionFire.Blazor.Components.Terminal
@using MudBlazor.Components
@using Humanizer

@* This page is a quick UI for optimizing right from a Worker process' UI.  The long-term approach favors a FireLynx workbench that supports Optimize documents which can be saved/loaded.  *@

@* <LionFire.Trading.Automation.Blazor.Infra.CpuChart/> *@


<div class="d-flex flex-column flex-grow-1 gap-2">

    @* ▉▉▉▉___  Toolbar: [Abort] [Optimize] *@
    <MudPaper id="TopActionAndProgressBar" Class="gap-6 d-flex flex-row justify-end pa-6">
        @if (ViewModel!.IsRunning || ViewModel.Progress.Completed > 0)
        {
            <div class="flex-grow" style="flex-grow: 1;">

                <div style="flex-grow: 1; flex-basis: 250px; max-width: 340px;" class="mb-2">
                    @if (true || ViewModel!.IsRunning)
                    {

                        <div style="display: grid; grid-template-columns: auto 1fr auto; gap: 10px; align-content: center; align-items: center; align-self: end;">
                            @if (ViewModel.IsRunning)
                            {
                                <div class="lf-field">
                                    @* <div class="label">Completish</div> *@
                                    <div class="value" title="Queued">@ViewModel.Progress.Queued</div>
                                </div>
                                <MudProgressLinear style="align-self: start;" Color="Color.Primary" Value="@ViewModel.Progress.Queued" Max="@ViewModel.POptimization.LevelsOfDetail.PlannedScanTotal" Size="Size.Small">
                                    @*    <MudText Typo="Typo.subtitle1" Color="Color.Tertiary">
                                        <b>@ViewModel.Progress.Queued</b>
                                    </MudText> *@
                                </MudProgressLinear>
                                <div class="lf-field" title="Planned">
                                    @* <div class="label">Fractional Progress</div> *@
                                    <div class="value">@ViewModel.POptimization.LevelsOfDetail.PlannedScanTotal</div>
                                </div>
                            }

                            @if (ViewModel.IsRunning)
                            {
                                <div class="lf-field">
                                    @* <div class="label">Completish</div> *@
                                    <div class="value" title="Fractionally Completed">@ViewModel.Progress.FractionallyCompleted</div>
                                </div>
                                <MudProgressLinear style="align-self: start;" Color="Color.Primary" Value="@ViewModel.Progress.FractionalPercent" Size="Size.Small">
                                    @*    <MudText Typo="Typo.subtitle1" Color="Color.Tertiary">
                                        <b>@ViewModel.Progress.FractionallyCompleted</b>
                                    </MudText> *@
                                </MudProgressLinear>
                                <div class="lf-field" title="Fractional Progress">
                                    @* <div class="label">Fractional Progress</div> *@
                                    <div class="value">@ViewModel.Progress.FractionalPerUn.ToString("P1")</div>
                                </div>
                            }

                            <div class="lf-field" title="Completed">
                                @* <div class="label">Completed</div> *@
                                <div class="value">@ViewModel.Progress.Completed</div>
                            </div>

                            <MudProgressLinear style="align-self: end;" Color="Color.Primary" Value="@ViewModel.Progress.Percent" Size="Size.Large" Buffer=false BufferValue="@ViewModel.Progress.FractionalPercent">
                                @*                                 <MudText Typo="Typo.subtitle1" Color="Color.Tertiary">
                                    <b>@ViewModel.Progress.Completed</b>
                                </MudText> *@
                            </MudProgressLinear>
                            <div class="lf-field">
                                @* <div class="label">Progress</div> *@
                                <div class="value">@ViewModel.Progress.PerUn.ToString("P1")</div>
                            </div>

                        </div>
                    }
                </div>
                @* 
                <div class="gap-4" style="display: grid;  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));  ">
                    @if (ViewModel.IsRunning)
                    {
                        <div class="lf-field">
                            <div class="label">Queued</div>
                            <div class="value">@ViewModel.Progress.Queued</div>
                        </div>
                        <div class="lf-field">
                            <div class="label">Planned Scan</div>
                            <div class="value">@ViewModel.POptimization2.LevelsOfDetail.PlannedScanTotal</div>
                        </div>
                    }


                       </div> *@

            </div>
            <div class="d-flex flex-column no-wrap lf-fieldset">

                @* <div class="lf-field">
                    <div class="caption"></div>
                    <div class="value">@ViewModel.Progress.</div>
                </div>
                <div class="lf-field">
                    <div class="caption"></div>
                    <div class="value">@ViewModel.Progress.</div>
                </div>
                <div class="lf-field">
                    <div class="caption"></div>
                    <div class="value">@ViewModel.Progress.</div>
                </div>
                <div class="lf-field">
                    <div class="caption"></div>
                    <div class="value">@ViewModel.Progress.</div>
                </div>
                <div class="lf-field">
                    <div class="caption"></div>
                    <div class="value">@ViewModel.Progress.</div>
                </div>
                <div class="lf-field">
                    <div class="caption"></div>
                    <div class="value">@ViewModel.Progress.</div>
                </div> *@
            </div>
        }

        <RuntimeStatsForOptimization />

        <div>
            <div class="lf-field row">
                <div class="value">@((ViewModel.POptimization.LevelsOfDetail.ComprehensiveScanPerUn).ToString("P0"))</div>
                <div class="label">Comprehensiveness</div>
            </div>
            <MudProgressLinear Value="ViewModel.POptimization.LevelsOfDetail.ComprehensiveScanPerUn" Min="0" Max="1"
                               Color="ComprehensivenessColor" />
            @* <MudProgressCircular Min="0" Max="1" Value="ViewModel.POptimization.LevelsOfDetail.ComprehensiveScanPerUn" /> *@
        </div>

        @if (ViewModel!.IsRunning)
        {
            <MudIconButton OnClick="@ViewModel!.Cancel" Color="@(ViewModel.IsRunning ? Color.Error : Color.Dark)" Variant="@(ViewModel!.IsAborting ? Variant.Filled : Variant.Outlined)" Size="Size.Large" Disabled=!ViewModel!.IsRunning Icon="@Icons.Material.Filled.Stop" >
                @if (ViewModel!.IsAborting)
                {
                    <text>Aborting...</text>
                    <MudProgressCircular Color="Color.Default" />
                }
                else
                {
                    <text>Abort</text>
                }
            </MudIconButton>
        }

        <MudButton OnClick="@ViewModel!.DoGC" Color="Color.Dark" Variant="Variant.Outlined" Size="Size.Small">
            <text>GC</text>
        </MudButton>
        <MudButton OnClick="@ViewModel!.Clear" Color="Color.Tertiary" Variant="Variant.Outlined" Size="Size.Large">
            <text>Clear</text>
        </MudButton>

        <MudButton OnClick="ViewModel.OnOptimize" Color="Color.Primary" Variant="@(ViewModel!.IsRunning && !ViewModel!.IsAborting ? Variant.Filled : Variant.Outlined)" Size="Size.Large">
            @if (ViewModel!.IsRunning)
            {
                <text>Optimizing...</text>
            }
            else
            {
                <text>Optimize</text>
            }
        </MudButton>
    </MudPaper>

    <MudPaper Class="pa-6">
        <GeneralParameters ViewModel="ViewModel" />
    </MudPaper>

    <div style="overflow-y: auto; ">
        @* min-height: calc(100% - 100px); *@
        <MudTabs @bind-ActivePanelIndex="_activeTabIndex" Border="true" Outlined="true" PanelClass="px-4 py-6 object-fill" ApplyEffectsToContainer="true" Style="min-height: calc(100% - 100px); height: calc(100% - 100px);">
            <ChildContent>
                <MudTabPanel Text="Parameters">
                    <OptimizeParameters ViewModel="ViewModel" />
                </MudTabPanel>
                <MudTabPanel Text="Level of Detail">
                    <OptimizationStatus ViewModel="ViewModel" />
                </MudTabPanel>
                <MudTabPanel Text="Performance Tuning">
                    <PerformanceTuning ViewModel="ViewModel" />
                </MudTabPanel>
                <MudTabPanel Text="Properties Explorer">
                    <ObjectExplorer CurrentObject="ViewModel" />
                </MudTabPanel>
                <MudTabPanel Text="Output Settings">
                    <OutputParameters ViewModel="ViewModel" />
                </MudTabPanel>
                <MudTabPanel Text="Results">
                    <MudGrid>
                        <MudItem>
                            @if (ViewModel!.OptimizationTask?.BacktestsJournal?.BatchDirectory != null)
                            {
                                <div>
                                    Dir:
                                    <a href="@($"file:///{ViewModel!.OptimizationTask?.BacktestsJournal?.BatchDirectory}")">@ViewModel!.OptimizationTask?.BacktestsJournal?.BatchDirectory</a>
                                </div>
                            }
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>
                <MudTabPanel Text="Backtests">
                    <BacktestResults ViewModel="ViewModel" />


                </MudTabPanel>
            </ChildContent>
        </MudTabs>

        @*      <MudExpansionPanels id="MainPanels" MultiExpansion=true>
            <MudExpansionPanel Text="Parameters" @bind-Expanded=@ShowParameters>
                <OptimizeParameters ViewModel="ViewModel" />
            </MudExpansionPanel>

            <MudExpansionPanel Text="Level of Detail" @bind-Expanded=@ShowOptimizationStatus>
                <OptimizationStatus ViewModel="ViewModel" />
            </MudExpansionPanel>

            <MudExpansionPanel Text="Performance Tuning">
                <PerformanceTuning ViewModel="ViewModel" />
            </MudExpansionPanel>

            <MudExpansionPanel Text="Properties Explorer ">
                <div class="overflow-auto">
                    <ObjectExplorer CurrentObject="ViewModel" />
                </div>
            </MudExpansionPanel>

            <MudExpansionPanel Text="Output Settings">
                <OutputParameters ViewModel="ViewModel" />
            </MudExpansionPanel>
            <MudExpansionPanel Text="Chart" >
                <div>
                    <OptimizationResultsChart />
                </div>
            </MudExpansionPanel>
            <MudExpansionPanel Text="Results" @bind-Expanded=@ShowResults>
                <MudGrid>
                    <MudItem>
                        @if (ViewModel!.OptimizationTask?.BacktestsJournal?.BatchDirectory != null)
                        {
                            <div>
                                Dir:
                                <a href="@($"file:///{ViewModel!.OptimizationTask?.BacktestsJournal?.BatchDirectory}")">@ViewModel!.OptimizationTask?.BacktestsJournal?.BatchDirectory</a>

                            </div>
                        }
                    </MudItem>
                </MudGrid>
            </MudExpansionPanel>

            <MudExpansionPanel Text="Backtests" @bind-Expanded=@ShowBacktests>
                @if (ViewModel!.OptimizationTask?.BacktestsJournal?.ObservableCache?.Items != null)
                {
                    <MudDataGrid Items="ViewModel.OptimizationTask.BacktestsJournal.ObservableCache.Items" Virtualize="true" FixedHeader="true" Height="350px" SortMode="@_sortMode" Dense=true>
                        <Columns>
                            <PropertyColumn Property="x => x.StringId" />
                            <PropertyColumn Property="x => x.Fitness" />
                            <PropertyColumn Property="x => x.AD" />
                        </Columns>
                    </MudDataGrid>
                }
            </MudExpansionPanel>
        </MudExpansionPanels>
 *@
    </div>

    <MudSpacer />
    <div style="min-height: 50px;">
        <MudExpansionPanels>
            <MudExpansionPanel Text="Log" @bind-Expanded=@ShowLog>
                <div style="height: 200px; overflow: auto;">
                    <TerminalView ViewModel="ViewModel!.LinesVM" />
                </div>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </div>
</div>


