@inherits ReactiveComponentBase<OneShotOptimizeVM>


@using LionFire.Trading.Automation.Blazor.Optimization.Charts


<MudIconButton OnClick="@(() => _open ^= true)" Icon="@Icons.Material.Outlined.Expand" />

<TimeSeriesResultsChart ViewModel="ViewModel" />
@* ="min-height: calc(100% - 100px);" *@

<MudDrawer @bind-Open="@_open" Anchor="@_anchor" Elevation="1"
           Variant="@DrawerVariant.Persistent" OverlayAutoClose="@_overlayAutoClose">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">Results</MudText>
    </MudDrawerHeader>
    @if (ViewModel!.OptimizationTask?.BacktestsJournal?.ObservableCache?.Items != null)
    {
        <MudDataGrid Items="ViewModel.OptimizationTask.BacktestsJournal.ObservableCache.Items" Virtualize="true" FixedHeader="true" Height="350px" SortMode="@_sortMode" Dense=true>
            <Columns>
                <PropertyColumn Property="x => x.BatchId" Hidden=true Hideable="true" />
                <PropertyColumn Property="x => x.Id" Hideable="true" Hidden="true" />
                <PropertyColumn Property="x => x.Fitness" Hideable="true" />
                <PropertyColumn Property="x => x.AD" Format="N1" CellClass="text-align-right" />
                <PropertyColumn Property="x => x.TotalTrades / ((ViewModel.DateRange.End! - ViewModel.DateRange.Start!).Value.TotalDays)" Format="N2" Title="TPD" Hideable="true" />
                <PropertyColumn Property="x => x.TotalTrades" Hideable="true" />
                <PropertyColumn Property="x => x.WinRate" Format="P1" Hideable="true" />
                <PropertyColumn Property="x => x.AMWT" Format="N0" Hideable="true" />
                <PropertyColumn Property="x => x.Wins" Hideable="true" Hidden="true" />
                <PropertyColumn Property="x => x.Losses" Hideable="true" Hidden="true" />
                <PropertyColumn Property="x => x.Breakevens" Hideable="true" Hidden="true" />
                <PropertyColumn Property="x => x.ClosedTrades" Hideable="true" Hidden="true" />

                <TemplateColumn Title="Flags">
                    <CellTemplate>
                        @if (context.Item.IsAborted)
                        {
                            <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.CancelPresentation" Color="@Color.Dark" Style="background-color: #000000; padding: 0 2px; box-sizing: content-box; border-radius: 3px; fill: #920013;" />
                        }
                    </CellTemplate>
                </TemplateColumn>
                @*   @foreach(var parameter in ViewModel.POptimization.OptimizableParameters)
                {
                    <PropertyColumn Property="x => x.Parameters[parameter.Path]" />
                } *@
                <TemplateColumn>
                    <CellTemplate>
                        <MudIconButton Icon="@Icons.Material.Filled.ArrowCircleRight"
                                       Size="Size.Small" Color="Color.Dark" OnClick="@(() => ViewModel.OnExportToBot(context.Item,WorkspaceBots))" />

                        @*                         <MudToggleIconButton Icon="@Icons.Material.Filled.BookmarkBorder" ToggledIcon="@Icons.Material.Filled.Bookmark" ToggledColor=@Color.Primary Size="Size.Small" Color="Color.Dark"
                                             Toggled=@(ViewModel!.Portfolio?.IsInPortfolio(ViewModel!.OptimizationRunInfo, context.Item) == true) 
                                             ToggledChanged=@(() => ViewModel!.Portfolio?.Toggle(ViewModel.OptimizationRunInfo, context.Item)) /> *@
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    }
    else
    {
        <text>(no results)</text>
    }
</MudDrawer>
