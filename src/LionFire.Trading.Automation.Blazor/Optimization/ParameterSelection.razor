@using DynamicData
@inherits ReactiveComponentBase<OneShotOptimizeVM>

<MudCard>
    <MudGrid id="ParameterPreselection" Class="gap-x-3 gap-y-3">
        <MudItem sm="4">
            <div class="lf-field row align-center">
                <label style="order:-10;">Minimum Priority</label>
                <MudTextField style="width: 4ch;" @bind-Value="ViewModel!.POptimization.MinParameterPriority" data-Label="Min Parameter Priority" Dense="@true" />
                <MudIconButton Class=@("mr-4 " + (ViewModel.POptimization.InverseMinParameterPriority == -(ViewModel!.MaxParameterPriority) ? "invisible" : "")) Icon="@Icons.Material.Outlined.Close" Size="Size.Small" OnClick="(_=> ViewModel.POptimization.InverseMinParameterPriority = -(ViewModel!.MaxParameterPriority))" />
                <MudSlider T="int" @bind-Value="ViewModel.POptimization.InverseMinParameterPriority"
                           Min=@(-(ViewModel!.MaxParameterPriority + 1)) Max=@(-(ViewModel!.MinParameterPriority - 1))
                           Label="Min Parameter Priority" Dense="@true" />
            </div>
        </MudItem>
    </MudGrid>

    <div>
        <MudText Typo="Typo.h5">To Optimize</MudText>
    </div>

    <div class="mt-4 ml-4">
        <MudGrid Class="gap-x-3 gap-y-1" Spacing="4">
            @foreach (var p in AllParameters.KeyValues.Values.Where(ShouldShow).OrderByDescending(p => p.Info.ParameterAttribute.OptimizePriorityInt).ThenBy(p => p.Info.Path))
            {
                <DynamicComponent Type="typeof(ParameterToOptimize<>).MakeGenericType(p.ValueType)" Parameters="@GetParameters(p)" />

                @* <ParameterToOptimize TValue=@p.options.TValue ViewModel="ViewModel" Parameter="p" /> *@
            }
        </MudGrid>
    </div>

    <MudText Typo="Typo.h5">Fixed Values</MudText>
    <div class="mt-4 ml-4">
        <MudGrid Class="gap-x-3 gap-y-1" Spacing="4">
            @foreach (var p in AllParameters.KeyValues.Values.Where(p => !ShouldShow(p)).OrderByDescending(p => p.Info.ParameterAttribute.OptimizePriorityInt).ThenBy(p => p.Info.Path))
            {
                <DynamicComponent Type="typeof(ParameterToOptimize<>).MakeGenericType(p.ValueType)" Parameters="@GetParameters(p, fixedValue: true)" />
                @* <ParameterToOptimize FixedValue="true" ViewModel="ViewModel" Parameter="p" /> *@
            }
        </MudGrid>
    </div>

    @* <InspectorView Object="ViewModel!.POptimization" /> *@
</MudCard>

@code {

    IObservableCache<IParameterOptimizationOptions, string> AllParameters => ViewModel!.POptimization.Parameters;

    public bool ShouldShow(IParameterOptimizationOptions options)
    {
        return options.EnableOptimization.HasValue ? options.EnableOptimization.Value : options.Info.ParameterAttribute.OptimizePriorityInt >= ViewModel!.POptimization.MinParameterPriority || options?.EnableOptimization == true;
    }

    private Dictionary<string, object> GetParameters(IParameterOptimizationOptions options, bool fixedValue = false)
    {

        var x = EventCallback.Factory.Create<bool>(this, v => { options.EnableOptimization = v; OnSetEnabled(); });

        // var x = (EventCallback<bool>)(Action<bool>)(v => { options.EnableOptimization = v; OnSetEnabled(); });

        return new Dictionary<string, object>
        {
            { "ViewModel", ViewModel! },
            { "Parameter", options },
            { "FixedValue", fixedValue },
            { "ItemSize", fixedValue ? 2 : 5 },
            { "SetEnabled", x }
        };
    }

    void OnSetEnabled()
    {
        _ = InvokeAsync(StateHasChanged);
    }
}