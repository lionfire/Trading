@using System.Numerics
@typeparam TValue where TValue : struct, INumber<TValue>

<div class=@("d-flex gap-2 align-center " + (Reverse ? "flex-row-reverse" : "flex-row"))>
    <MudSlider T="TValue" @bind-Value="effectiveValue" Color="HasValue ? Color.Primary : Color.Dark" Min="Min" Max="Max" Step="EffectiveStep" ValueLabel="true" Size="@Size" />
    @* <div style=@($"min-width: {EffectiveCharacterWidth}ch")>
        @EffectiveValue
    </div> *@
    <div style="width: 4px;"/>
    <MudNumericField Variant="Variant.Text" Style=@($"min-width: {EffectiveCharacterWidth}ch") @bind-Value=EffectiveValue Min="EffectiveHardMin" Max="EffectiveHardMax" Step="EffectiveStep" />
    <MudIconButton Class="@(HasValue ? "" : "invisible")" Icon="@Icons.Material.Outlined.Close" Size="Size.Small" OnClick="(_=> value = default)" Disabled=!HasValue />
    @if (!string.IsNullOrEmpty(Text))
    {
        <label style="@(TextOrderStyle)">@Text</label>
    }
</div>

@code {
    [Parameter]
    public Size Size { get; set; } = Size.Medium;

    [Parameter]
    public int? CharacterWidth { get; set; }
    public int EffectiveCharacterWidth => CharacterWidth ?? 10; // TODO: Default to how many characters Max or Min Values are.

    [Parameter]
    public TValue? Step { get; set; }
    public TValue EffectiveStep
    {
        get
        {
            if (Step.HasValue) return Step.Value;
            if ((Max - Min) <= TValue.CreateChecked(1.0))
            {
                return TValue.CreateChecked(0.05);
            }
            else if ((Max - Min) < TValue.CreateChecked(5.0))
            {
                return TValue.CreateChecked(0.1);
            }
            else
            {
                return TValue.CreateChecked(1);
            }
        }
    }

    [Parameter]
    public int TextOrder { get; set; }
    public string TextOrderStyle => TextOrder == 0 ? "" : $"order: {TextOrder}; ";

    [Parameter]
    public string? Text { get; set; }
    [Parameter]
    public bool Reverse { get; set; }
    [Parameter]
    public IParameterOptimizationOptions? Parameter { get; set; }

    [Parameter]
    public TValue EffectiveValue { get; set; }
    TValue effectiveValue { get => EffectiveValue; set { EffectiveValueChanged.InvokeAsync(value); } }
    [Parameter]
    public EventCallback<TValue> EffectiveValueChanged { get; set; }
    [Parameter]
    public TValue? Value { get; set; }
    TValue? value { get => Value; set { ValueChanged.InvokeAsync(value); } }
    [Parameter]
    public EventCallback<TValue?> ValueChanged { get; set; }

    [Parameter]
    public bool HasValue { get; set; }
    [Parameter]
    public EventCallback<bool> HasValueChanged { get; set; }

    [Parameter]
    public TValue? HardMin { get; set; }
    public TValue EffectiveHardMin => HardMin ?? Min;
    [Parameter]
    public TValue? HardMax { get; set; }
    public TValue EffectiveHardMax => HardMax ?? Max;
    [Parameter]
    public TValue Min { get; set; }
    [Parameter]
    public TValue Max { get; set; }

    #region Convenience

    public HierarchicalPropertyInfo info => Parameter?.Info;
    public ParameterOptimizationOptions<TValue>? Options => (ParameterOptimizationOptions<TValue>?)Parameter;

    #endregion
}
